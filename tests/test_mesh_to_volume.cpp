#include <mesh_to_volume.h>

#include <catch2/catch_test_macros.hpp>

namespace {

mylib::Mesh create_test_sphere()
{
    std::vector<float> V = {
        0.f,        -1.f,       0.f,        0.723607f,  -0.44722f,  0.525725f,  -0.276388f,
        -0.44722f,  0.850649f,  -0.894426f, -0.447216f, 0.f,        -0.276388f, -0.44722f,
        -0.850649f, 0.723607f,  -0.44722f,  -0.525725f, 0.276388f,  0.44722f,   0.850649f,
        -0.723607f, 0.44722f,   0.525725f,  -0.723607f, 0.44722f,   -0.525725f, 0.276388f,
        0.44722f,   -0.850649f, 0.894426f,  0.447216f,  0.f,        0.f,        1.f,
        0.f,        -0.162456f, -0.850654f, 0.499995f,  0.425323f,  -0.850654f, 0.309011f,
        0.262869f,  -0.525738f, 0.809012f,  0.850648f,  -0.525736f, 0.f,        0.425323f,
        -0.850654f, -0.309011f, -0.52573f,  -0.850652f, 0.f,        -0.688189f, -0.525736f,
        0.499997f,  -0.162456f, -0.850654f, -0.499995f, -0.688189f, -0.525736f, -0.499997f,
        0.262869f,  -0.525738f, -0.809012f, 0.951058f,  0.f,        0.309013f,  0.951058f,
        0.f,        -0.309013f, 0.f,        0.f,        1.f,        0.587786f,  0.f,
        0.809017f,  -0.951058f, 0.f,        0.309013f,  -0.587786f, 0.f,        0.809017f,
        -0.587786f, 0.f,        -0.809017f, -0.951058f, 0.f,        -0.309013f, 0.587786f,
        0.f,        -0.809017f, 0.f,        0.f,        -1.f,       0.688189f,  0.525736f,
        0.499997f,  -0.262869f, 0.525738f,  0.809012f,  -0.850648f, 0.525736f,  0.f,
        -0.262869f, 0.525738f,  -0.809012f, 0.688189f,  0.525736f,  -0.499997f, 0.162456f,
        0.850654f,  0.499995f,  0.52573f,   0.850652f,  0.f,        -0.425323f, 0.850654f,
        0.309011f,  -0.425323f, 0.850654f,  -0.309011f, 0.162456f,  0.850654f,  -0.499995f};

    std::vector<int> F = {
        0,  13, 12, 1,  13, 15, 0,  12, 17, 0,  17, 19, 0,  19, 16, 1,  15, 22, 2,  14, 24, 3,
        18, 26, 4,  20, 28, 5,  21, 30, 1,  22, 25, 2,  24, 27, 3,  26, 29, 4,  28, 31, 5,  30,
        23, 6,  32, 37, 7,  33, 39, 8,  34, 40, 9,  35, 41, 10, 36, 38, 38, 41, 11, 38, 36, 41,
        36, 9,  41, 41, 40, 11, 41, 35, 40, 35, 8,  40, 40, 39, 11, 40, 34, 39, 34, 7,  39, 39,
        37, 11, 39, 33, 37, 33, 6,  37, 37, 38, 11, 37, 32, 38, 32, 10, 38, 23, 36, 10, 23, 30,
        36, 30, 9,  36, 31, 35, 9,  31, 28, 35, 28, 8,  35, 29, 34, 8,  29, 26, 34, 26, 7,  34,
        27, 33, 7,  27, 24, 33, 24, 6,  33, 25, 32, 6,  25, 22, 32, 22, 10, 32, 30, 31, 9,  30,
        21, 31, 21, 4,  31, 28, 29, 8,  28, 20, 29, 20, 3,  29, 26, 27, 7,  26, 18, 27, 18, 2,
        27, 24, 25, 6,  24, 14, 25, 14, 1,  25, 22, 23, 10, 22, 15, 23, 15, 5,  23, 16, 21, 5,
        16, 19, 21, 19, 4,  21, 19, 20, 4,  19, 17, 20, 17, 3,  20, 17, 18, 3,  17, 12, 18, 12,
        2,  18, 15, 16, 5,  15, 13, 16, 13, 0,  16, 12, 14, 2,  12, 13, 14, 13, 1,  14};

    assert(V.size() % 3 == 0);
    assert(F.size() % 3 == 0);
    mylib::Mesh sphere;
    for (int i = 0; 3 * i < V.size(); ++i) {
        sphere.vertices.push_back({V[3 * i], V[3 * i + 1], V[3 * i + 2]});
    }
    for (int i = 0; 3 * i < F.size(); ++i) {
        sphere.facets.push_back({F[3 * i], F[3 * i + 1], F[3 * i + 2]});
    }

    return sphere;
}

} // namespace

TEST_CASE("mesh_to_volume", "[openvdb]")
{
    mylib::mesh_to_volume(create_test_sphere(), 0.05);
}
